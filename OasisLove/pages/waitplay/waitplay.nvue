<template>   
	<view class="container">
		<view class="videoBackground">
			<video id="videoA" autoplay="true" muted="true"  :controls="false" object-fit="cover" :show-center-play-btn="false">
		
			</video>
			<view class="friendInfo" v-show="!isJieting">
				<image :src="friendImage"></image>
				<p>{{friendName}}</p>
			</view>
			
			<view class="btns">
				<view class="title">{{title}}</view>
				<view class="close" @tap="closeMedia">
					<image src="../../static/image/guaduan.png"></image>				
				</view>
				
				<view class="start" @tap="startMedia" v-show="!isJieting">
					<image src="../../static/image/jieting.png"></image>				
				</view>
			</view>
		</view>
		
		
		<view class="videoBackground2" v-show="isJieting">
			<video id="videoB" autoplay="true" :controls="false" object-fit="cover" :show-center-play-btn="false"></video>
		</view>
	</view>
</template>



    
<script>
	import {getUserInfo} from '../../util/api.js'
	import {VideoInitiator,VideoReceiver} from '../../common/js/createRTCConnection.js'
	import store from '@/store/index.js'; 
	export default {
	    data() {
	        return {
				src:'',   		// 拉流地址
				windowWidth:0,		// 设备宽度
				windowHeight:0, 	// 设备高度
				title:'邀请你视频通话...',
				statusBarHeight:0,  //状态栏高度
				userName:'哒哒哒',	// 用户名
				url:'',				// 推流地址
				friendName:'Null',	//朋友昵称
				friendImage:'',		//朋友头像
				isjietin:false,		// 是否接听
				friendId:-1,		// 朋友id 接收者id
				myid:-1,				// 自己id 发起者id
				peerB:null,			// 接收端
				offer:null,
				answer:null,
				setIceCandidate:Object,	 // 接收者添加 IceCandidate
				streamOn:null,			// 接收者的媒体流
				streamEmit:null,		// 发起者的媒体流
				clearPeerB:Object,		// 清除 接收者
				isJieting:false,		//是否点击了接听
				type:'',				//通话类型
			}
	    },
	    onReady() {
	        // 注意：需要在onReady中 或 onLoad 延时
			
			// this.videoContext = uni.createVideoContext('myVideo')
			// console.log(this.src)
	        //this.context = uni.createLivePusherContext("livePusher", this);
	    },
		onLoad(option) {
			
			//this.offer = JSON.stringify(option.offer)
			 //this.offer = JSON.parse(option.offer)
			 this.offer = store.state.offer
			 
			 console.log("waitplay组件拿到 store里的 offer",this.offer)
			// console.log("waitplay组件拿到通过JSON.parse转换后的offer",this.offer)
			 this.friendId = option.fasongzeid 
			 this.myid = option.friendId
			 this.type = option.mediaType.trim()
			 if(this.type ==="yy"){
				
				 this.title = "邀请你语音通话..."
			 }else{
				 this.title = "邀请你视频通话..."
			 }
			
			 
			 if(this.offer){
				this.getFriendInfo()
			 }
			 this.onCloseMedia()
			 
		},
	    methods: {
			getFriendInfo(){
				getUserInfo(this.friendId).then(res=>{				
					this.friendName = res.data.result[0].nicName
					this.friendImage = res.data.result[0].user_img
					this.init()
				})
			},
			 init(){
				this.setIceCandidate = VideoReceiver(this.offer,(remoteStream)=>{
					let videoElement = document.getElementsByTagName('video')[0]
					this.streamOn = remoteStream
					console.log("waitplay组件拿到的stream媒体流",this.streamOn)
					videoElement.srcObject = this.streamOn
					
					//console.log(remoteStream)
				},(answer,clearPeerB)=>{
					// 将 接收者 的 answer 传递给 发起者
					this.socket.emit('pushAnswer', this.friendId, answer,this.myid)
					this.clearPeerB = clearPeerB
				})
				
				// 监听 peerA （发起者）传来的 Candidate
				this.socket.on('onCandidate', (data) => {
					//console.log(data.Candidate)
					
					this.setIceCandidate.then(res=>{
						res(data.Candidate)
					})
				})

			},
			// 监听对方挂断
			onCloseMedia(){
				this.socket.on('CloseInfos', (jiesouzheid, faqizheid, type, message) => {
					this.title = message
					this.clearStream(this.streamOn)
					if(this.streamEmit){
						this.clearStream(this.streamEmit)
					}
					setTimeout(()=>{uni.navigateTo({
						url:"../home/home"
					})},1000)	
					this.clearPeerB()
				})
				
				// // 获取offer
				// this.socket.on('offerFromLive', (data) => {
				// 	console.log("获取offer")
				// 	this.offer = data.offer
				// 	if(this.offer){
				// 		this.getFriendInfo()
				// 	}
				// })
			},
			// 清除媒体流
			clearStream(stream){
				if(stream){
					stream.getTracks().forEach(track=>{
						track.stop()
					})
					stream.getAudioTracks()[0].stop();
				}
				console.log(this.type ==="sp")
				if(stream && this.type==="sp"){
					
					stream.getVideoTracks()[0].stop();
				}
				
			},
			// 挂断视频通话
			closeMedia(){
				if(this.streamEmit){
					this.clearStream(this.streamEmit)
				}
				this.clearStream(this.streamOn)
				
				this.socket.emit("MediaInfos",this.friendId, this.myid,"VideoReceiver","对方已挂断",)
				setTimeout(()=>{
				uni.navigateTo({
					url:"../home/home"
				})
				},1000)
				this.clearPeerB()
			},
			// 点击了接听
			async startMedia(){
				this.isJieting = true
				this.title = ''
				let obj
				if(this.type =="yy"){ 	
					console.log("语音")
					obj = {
						audio: true,
						video: false
					}
				}else{
					console.log("视频")
					obj = {
						audio: true,
						
						video: {
						    width: 1920,
						    height: 1080
						  }
					}
				}
				this.streamEmit = await navigator.mediaDevices.getUserMedia(obj)
										
					// 在 video 标签上播放媒体流
					
					let videoElement2 = document.getElementsByTagName('video')[1]
					videoElement2.srcObject = this.streamEmit
					// console.log(this.streamEmit)
					
					
					this.setSDP = VideoInitiator(this.streamEmit,(offer)=>{
						// 将 发起者 的 offer发送给 peerB（接收端）
						console.log("执行了sendoffer")
						this.socket.emit('livepush', this.friendId, offer,this.myid,"waitplay")
					},(candidate,clearPeerA)=>{
						// 将 event.candidate 发送给 peerB端。
						console.log("执行了pushCandidate")
						this.socket.emit('pushCandidate', this.friendId, candidate,this.myid)
						this.clearPeerA = clearPeerA
					})
					
					
					// 监听peerB(接收端) 发来的 answer
					this.socket.on('onAnswer',async (data) => {
						console.log(data)
						console.log(this.setSDP)
						this.setSDP.then(res=>{
							res(data.answer)
						})
					    this.answer = data.answer
						//console.log(this.answer)							
					
					})
			}
			
	    }
	}
	
	
	
	
	
</script>



<style lang="less">
	.videoBackground{
		width: 100vw;
		height: 100vh;
		color: #fff;
		#videoA{
			width: 100%;
			height: 100vh;
			position: absolute;
			top: 0;
			left: 0;
			z-index: 0;
		}
		.friendInfo{
			width: 200rpx;
			position: absolute;
			left: 50%;
			top: 20%;
			transform: translateX(-50%);
			
			image{
				margin: 0 auto;
				width: 120rpx;
				height: 120rpx;
			}
			p{
				margin: 0 auto;
				margin-top: 8rpx;
				font-size: 18px;
			}
		}
		.btns{	
			width: 300rpx;
			position: relative;
			position: absolute;
			
			left: 50%;
			bottom: 10%;
			transform: translateX(-50%);
			
			.title{
				padding-bottom: 200rpx;
				margin: 0 auto;
			}
			.close{
				position:absolute;
				bottom: 0;
				left: 0;
				width: 100rpx;
				height: 100rpx;
				
				
				image{
					width: 100rpx;
					height: 100rpx;
					
				}
			}
			.start{
				position:absolute;
				bottom: 0;
				right: 0;
				
				width: 100rpx;
				height: 100rpx;			
				image{
					width: 100rpx;
					height: 100rpx;
					
				}
			}
			
		}
	}
	
	
	.videoBackground2{
		width: 250rpx;
		height: 400rpx;
		position: absolute;
		top: 2%;
		right: 0;
	} 
</style>
	
 
	
 
 
 
 
	 
 
 
 
 
 
 
 
 
 


